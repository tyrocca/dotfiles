# zsh Rc additions
cd ~/;
source bin/activate;
cd quorum-site;

# set path
export EDITOR="vim"
alias lint="~/quorum-site/node_modules/.bin/eslint"

###########
# Styling #
###########

# configure colors
reset_color=`tput sgr0`;
green_color=`tput setaf 2`;
red_color=`tput setaf 1`;
purple_color=`tput setaf 5`;

# commands to print messages of different colors
green(){
    echo "${green_color}$1${reset_color}";
}
purple(){
    echo "${purple_color}$1${reset_color}";
}
red(){
    echo "${red_color}$1${reset_color}";
}

####################
# Useful Functions #
####################

# aliases for shell_plus
sp(){
    find . -name "*pyc" -delete
    python manage.py shell_plus;
}
pdb_sp(){
    find . -name "*pyc" -delete
    red "#######################################";
    red "# WARNING - Using Production Database #";
    red "#######################################";
    python manage.py shell_plus --use_prod_db;
}

# db shell
dbshell(){
    find . -name "*pyc" -delete
    python manage.py dbshell;
}
pdb_dbshell(){
    find . -name "*pyc" -delete
    red "#######################################";
    red "# WARNING - Using Production Database #";
    red "#######################################";
    python manage.py dbshell --use_prod_db;
}

# runserver
serve(){
    green "### Running Server on port $1...";
    sudo chown -R $USER *
    sudo pkill -f $1
    find . -name "*pyc" -delete
    python manage.py runserver 0.0.0.0:$1;
}
pdb_serve(){
    find . -name "*pyc" -delete
    red "#######################################";
    red "# WARNING - Using Production Database #";
    red "#######################################";
    green "### Running Server on port $1...";
    sudo chown -R $USER *
    sudo pkill -f $1
    find . -name "*pyc" -delete
    python manage.py runserver 0.0.0.0:$1 --use_prod_db;
}

# parser
parse(){
    find . -name "*pyc" -delete
    python manage.py parse $1;
}
pdb_parse(){
    find . -name "*pyc" -delete
    red "#######################################";
    red "# WARNING - Using Production Database #";
    red "#######################################";
    python manage.py parse $1 --use_prod_db;
}

# for deleteing defunct / zombies
kill_zombies() {
    green "### You are now killing python zombies";
    for pid in $(ps -ef | awk '/defunct/ { print $3 }'); do
        kill "$pid";
    done;
    red "### Success: Zombies vanquished";
}

# wipe out swap files
ls_swp() {
    find . -name *swp
}

rm_swp() {
    find . -name *swp -delete;
}

# deployment
reset_remote () {
    # if no input arguments, use the current branch in git
    if [ $# -eq 0 ]
      then
        branchname=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
      else
        branchname=$1
    fi
    echo "Resetting remote to $branchname."
    sudo git clean -fdx
    sudo git reset --hard;
    sudo git fetch origin;
    sudo git checkout $branchname;
    sudo git reset --hard origin/$branchname;
    sudo chown -R $USER *;
    find . -name '*.pyc' -delete
}

#################
# Fun Functions #
#################

quorum_text () {
    echo "";
    purple " \$\$\$\$\$\$\\";
    purple "\$\$  __\$\$\\";
    purple "\$\$ /  \$\$ |\$\$\\   \$\$\\  \$\$\$\$\$\$\\   \$\$\$\$\$\$\\  \$\$\\   \$\$\\ \$\$\$\$\$\$\\\$\$\$\$\\";
    purple "\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$  __\$\$\\ \$\$  __\$\$\\ \$\$ |  \$\$ |\$\$  _\$\$  _\$\$\\";
    purple "\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$ /  \$\$ |\$\$ |  \\__|\$\$ |  \$\$ |\$\$ / \$\$ / \$\$ |";
    purple "\$\$ \$\$\\\$\$ |\$\$ |  \$\$ |\$\$ |  \$\$ |\$\$ |      \$\$ |  \$\$ |\$\$ | \$\$ | \$\$ |";
    purple "\\\$\$\$\$\$\$ / \\\$\$\$\$\$\$  |\\\$\$\$\$\$\$  |\$\$ |      \\\$\$\$\$\$\$  |\$\$ | \$\$ | \$\$ |";
    purple " \\___\$\$\$\\  \\______/  \\______/ \\__|       \\______/ \\__| \\__| \\__|";
    purple "     \\___|  * Data Driven Analytics | Dev Env for $USER *";
    echo "";
}
quorum_text

# fun cow thing
fortune | cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n1) | lolcat
echo ""


###pip install autopep8
auto_pep_file(){
    autopep8 --in-place --max-line-length 100 $1
}
style_clean(){
    yapf app/geography/models.py --style "google" -i
}

remove_dos() {
    echo "checking for ^M characters"
    grep -r -l  \
        --include \*\*.py \
        --include \*\*.html \
        --include \*\*.styl \
        --include \*\*.coffee | xargs dos2unix
    echo "^M characters were all removed"
}

if [[ "$TMUX" == "" ]] &&
        [[ "$SSH_CONNECTION" != "" ]]; then

    # Attempt to discover a detached session and attach
    # it, else create a new session
    WHOAMI=$(whoami)
    if tmux has-session -t $WHOAMI 2>/dev/null; then
        tmux -2 attach-session -t $WHOAMI
    else
        tmux -2 \
            new-session -s $WHOAMI \; \
            # seems to cause weird problems
            #new-session -s $WHOAMI "vim" \; \
            #split-window "python manage.py runserver 8888" \; \
            #split-window -h "python manage.py shell_plus" \; \
            #select-pane -U \; \
            #resize-pane -D 10
    fi
fi
