""""""""""""""""
" * Vim Plug * "
""""""""""""""""
set nocompatible              " be iMproved, required
" https://github.com/junegunn/vim-plug

" Automatic install
if !has("nvim") && empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
elseif has("nvim") && empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
else
    source ~/dotfiles/vim/plugins.vim
endif

""""""""""""""""""""""""
" * Built in Toggles * "
""""""""""""""""""""""""
" Colors
syntax enable
set background=dark

" Color scheme is gruvbox by default so anyone can use it
" (solarized requires special things)
if ($USER == "ty" || $USER == "tyrocca")
    " TRAIL ITEMS
    " let g:hardtime_default_on = 1

    " Not needed for neovim
    if !has('nvim')
        set t_Co=256
        let g:solarized_termcolors=16
    endif
    " Set colorscheme
    colorscheme solarized
else
    colorscheme gruvbox
endif



" Formatting / Settings
set backspace=2         " make backspace work
set expandtab       	" tabs are spaces (tab button = spaces)
" set smarttab
set fileformat=unix     " Make sure the files are always unix
set fileformats=unix    " Make sure the files are always unix
set shiftwidth=4        " number of spaces when shifting block
set softtabstop=4  	    " number of spaces in tab when editing
set tabstop=4 		    " number of visual spaces per TAB

" Makes it so that javascript keys are colored
" https://github.com/pangloss/vim-javascript/issues/138
hi def link jsObjectKey Label

" Italics for vim
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
highlight Comment cterm=italic

" http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden
set history=1000

" folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=0         "this is just what i use

" UI configs
filetype indent on      " load filetype-specific indent files
set scrolloff=5         " Makes the cursor offset
set colorcolumn=80      " keep within this column
set cursorline          " highlight current line
set lazyredraw          " redraw only when we need to.
set number 		        " show line nums
set showcmd 		    " show last entered command
set showmatch 		    " show matching ()
set wildmenu            " visual autocomplete for command menu

" UI Settings if nvim isn't running
if !has('nvim')
    set ttymouse=xterm2
    set mouse=a             " Turn on mouse mode
endif

" changes the cursor in vim
if has('nvim')
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
elseif exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""""""""""""""""""
" Fumble fingers "
""""""""""""""""""
" prevents writing stupid files
cabbrev w] w
cabbrev w\ w
cabbrev w' w

" make write actually write
command! W  write


" copy paste over ssh
" set clipboard^=unnamedplus,unnamed

" Search configs
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
set smartcase
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive

" turn off search highlight
"Vim will keep highlighted matches from searches until you
"either run a new one or manually stop highlighting the old
"search with :nohlsearch. I find myself running this all
" the time so I've mapped it to <leader><space>.
nnoremap <silent> <leader><space> :nohlsearch<CR>

" Other optimizations
" Some people say this helps speed up normal mode
set timeoutlen=1000 ttimeoutlen=0  " prevent slowdown on normal mode
inoremap jj <ESC>

" Prevent Arrow keys
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

"""""""""""""""""""""""
" Copying and pasting "
"""""""""""""""""""""""
" Reselecting Pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

"Paste toggle
set pastetoggle=<F2>

" f3 will toggle linenumbers
noremap <F3> :set invnumber<CR>
inoremap <F3> <C-O>:set invnumber<CR>

" f4 will toggle git gutter
noremap <F4> :GitGutterToggle<CR>
inoremap <F4> <C-O>:GitGutterToggle<CR>

" F5 toggles friendly colorscheme
noremap <F5> :colorscheme gruvbox <CR>

" F6 for background toggle
call togglebg#map("<F6>")

"""""""""""""""""""""
" Function Key Maps "
"""""""""""""""""""""
" f5 will strip out whitespace
"nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Toggle foldmethod on
nnoremap <F8> :setlocal foldmethod=indent<CR>:setlocal foldignore= <CR>

" Launch vimrc
nnoremap <F9> :tabe ~/.vimrc<CR>

"""""""""""""""""""""""
" Leader Key Mappings "
"""""""""""""""""""""""
" for inserting new lines (like <C-o>)
nnoremap <silent> <leader><CR> i<CR><ESC>
" this makes a nice surrounding block around a piece of text
nnoremap <leader>1 :center 80<CR>hhv0r#A<SPACE><ESC>40A#<ESC>d80<BAR>YppVr#kk.
" Remove those fucking ^M characters
nnoremap <silent> <leader>6 :%s///g<CR>

" for saving
nnoremap <leader>w :w<CR>

"""""""""""""""""""""""
" * GUI only things * "
"""""""""""""""""""""""
if has("gui_running")
    set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline
endif


""""""""""""""""""""
" * Plugin Mods  * "
""""""""""""""""""""

" File Navigation tools (if gui we need a different one)
if has("gui_running")
    """""""""""""""""""""""""""
    " Modifications for CTRLP "
    """""""""""""""""""""""""""
    nnoremap <silent> <leader>l :CtrlPMRU<CR>
    nnoremap <silent> <leader>b :CtrlPBuffer<CR>
    nnoremap <silent> <leader>t :CtrlPTag<cr>
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'

    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    let g:ctrlp_use_caching = 0
else
    """""""""""""""""""""""""
    " Modifications for FZF "
    """""""""""""""""""""""""
    nnoremap <silent> <C-p> :GitFiles<CR>
    nnoremap <silent> <leader>l :History<CR>
    nnoremap <silent> <leader>t :Tags<CR>
    nnoremap <silent> <leader>r :BTags<CR>
    nnoremap <silent> <leader>b :Buffers<CR>
endif

" wildcard
set wildignore+=*/tmp/*,**/css/*,
    \*/cc/*,*.so,*.swp,*.zip,*.pyc,*/.git

"""""""""""
" Airline "
"""""""""""
" For Airline
set laststatus=2

" For Airline
let g:airline_powerline_fonts = 1

" For TMUX plugin
let g:tmuxline_powerline_separators = 1

" View buffers
let g:airline#extensions#tabline#enabled = 1

"""""""""""
" ArgWrap "
"""""""""""
" Command to exec
nnoremap <silent> <leader>a :ArgWrap<CR>

""""""""""""
" Deoplete "
""""""""""""
if has('nvim')
    let g:deoplete#enable_at_startup = 1
    " mapping to make it so that tab triggers auto complete if you don't want
    " auto open
    " Disable auto complete
    " let g:deoplete#disable_auto_complete = 1
    " https://www.reddit.com/r/neovim/comments/4d04k1/deoplete_pops_up_when_i_dont_want_it_to/

    " Allows multiple omni functions
    let g:deoplete#omni#functions = {}
    let g:deoplete#omni#functions.javascript = [
        \ 'tern#Complete',
        \ 'jspc#omni'
    \]

    " Adjust deoplete sources
    set completeopt=longest,menuone,preview
    let g:deoplete#sources = {}
    let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']

    " autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
    " or just disable the preview entirely
    set completeopt-=preview
    " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    " Close the documentation window when completion is done
    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
endif

""""""""""""""""""""
" Fugitive settings "
"""""""""""""""""""""
" by default is split
set diffopt+=vertical

""""""""""""""""
" REPL - Slime "
""""""""""""""""
" SLIME
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

"""""""""""""""""""
" Syntax Checking "
"""""""""""""""""""

" makes gutter correct color
highlight clear SignColumn

"""""""""""
" NeoMake "
"""""""""""
" Python
let g:neomake_python_enabled_makers = ['flake8']
" Ignore Errors
let g:neomake_python_flake8_args = ['--max-line-length=200', '--ignore=W391']

" Javascript
let g:neomake_javascript_enabled_makers = ['eslint']

autocmd! BufWritePost * Neomake

" Since neomake works on both - just use that!
"""""""""""""
" Syntastic "
"""""""""""""
" " for syntastic use f12
" let g:syntastic_mode_map = { 'mode': 'active' }
" nnoremap <F10> :SyntasticToggleMode<CR>
" " Toggles Syntax check
" nnoremap <F12> :update<CR>:SyntasticCheck<CR>

" " Fun styling for syntastic
" let g:syntastic_error_symbol = '‚ùå'
" let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
" let g:syntastic_warning_symbol = '‚ö†Ô∏è'
" let g:syntastic_style_warning_symbol = 'üí©'

" " Javascript
" let g:syntastic_javascript_checkers = ['eslint']

" " Python
" let g:syntastic_python_checkers = ["flake8"]

" " Ignore Errors
" let g:syntastic_python_flake8_args = '--max-line-length=200 --ignore=W391'

"""""""""""""
" Ultisnips "
"""""""""""""
let g:UltiSnipsExpandTrigger="<Leader><Leader>"

""""""""
" TMUX "
""""""""
let g:tmux_navigator_save_on_switch = 1  " Save on close

"""""""""""""""
" Vim Grepper "
"""""""""""""""
if executable('ag')
    cnoreabbrev Ag GrepperAg
    " leader star ag's for you
    nnoremap <leader>*   :Grepper -tool ag -cword -noprompt<cr>
    " gs searches ex: gs$
    nmap gs <plug>(GrepperOperator)
    xmap gs <plug>(GrepperOperator)
endif

"""""""""""""
" vim notes "
"""""""""""""
let g:notes_directories = ['~/Notes']
let g:notes_suffix = '.txt'


"""""""""""""""""""""""""""""""
" * Webpack Specific Things * "
"""""""""""""""""""""""""""""""
" Webpack problems
" https://github.com/webpack/webpack/issues/781
set backupcopy=yes

"""""""""
" UNDO? "
"""""""""
" swap files

" swap files (.swp) in a common location
" // means use the file's full path
set dir=~/.vim/_swap//

" " backup files (~) in a common location if possible
" set backup
" set backupdir=~/.vim/_backup/,~/tmp,.

" " turn on undo files, put them in a common location
" set undofile
" set undodir=~/.vim/_undo/


"""""""""""""""""""""
" * Auto Commands * "
"""""""""""""""""""""

" auto cmd to strip whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Auto set width to 80 chars
" au BufRead,BufNewFile *.md setlocal textwidth=80

"""""""""""
" Credits "
"""""""""""
" inspiration
" http://marcgg.com/blog/2016/03/01/vimrc-example/

"""""""""""""""
" Trial Items "
"""""""""""""""


"""""""""""""
" Hard Mode "
"""""""""""""
let g:sneak#streak = 1
nnoremap <leader>h <Esc>:HardTimeToggle<CR>
let g:hardtime_ignore_quickfix = 1
let g:hardtime_maxcount = 2
let g:hardtime_showmsg = 1
let g:neomake_javascript_eslint_exe = $PWD .'/node_modules/.bin/eslint'

