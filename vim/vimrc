" for Vundle
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

"""""""""""
" Styling "
"""""""""""
" Solarized
Plugin 'altercation/vim-colors-solarized'

" LightLine
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Tmux line
Plugin 'edkolev/tmuxline.vim'

" Mod8 (spacegray)
Plugin 'easysid/mod8.vim'

" Molokai
Plugin 'tomasr/molokai'

" Monokai
Plugin 'sickill/vim-monokai'

" Indent guide
"Plugin 'Yggdroot/indentLine'

"""""""""""""
" Languages "
"""""""""""""

" CoffeeScript
Plugin 'kchmck/vim-coffee-script'

" CJSX
Plugin 'mtscout6/vim-cjsx'

" Stylus
Plugin 'wavded/vim-stylus'

" Typescript
Plugin 'leafgarland/typescript-vim'

" Javascript
Plugin 'pangloss/vim-javascript'

" Jsx 
Plugin 'mxw/vim-jsx'

" Vimscript
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'

" Typescript ide
"Plugin 'Quramy/tsuquyomi'

" Another Async library for typescript
"Plugin 'Shougo/vimproc.vim'

"""""""""""
" Editing "
"""""""""""
" Edit indent block
"   * ai ‚Äì the current indentation level and the line above
"   * ii ‚Äì the current indentation level excluding the line above
Plugin 'michaeljsmith/vim-indent-object'

" Commentout
Plugin 'scrooloose/nerdcommenter'

" Syntax highighting
if !has('nvim')
    Plugin 'scrooloose/syntastic'
else
    " Async highlighting
    Plugin 'neomake/neomake'
endif

" Server auto complete < no dependent files
Plugin 'ervandew/supertab'

" Surround
Plugin 'tpope/vim-surround'

" ArgWrap - fix argument wrapping
Plugin 'FooSoft/vim-argwrap'

" Repeater
Plugin 'tpope/vim-repeat'

" jedi vim - make sure you pip jedi
"Plugin 'davidhalter/jedi-vim'

" YOU complete me!
"Plugin 'Valloric/YouCompleteMe'

" Emmet
"Plugin 'mattn/emmet-vim'

" Multiple cursors
"Plugin 'terryma/vim-multiple-cursors'

" Fuzzy finder
"Plugin 'vim-scripts/FuzzyFinder'

""""""""""""""""""""
" Navigation Tools "
""""""""""""""""""""
" plugin to control p
Plugin 'ctrlpvim/ctrlp.vim'
" plugin to speed up control p
Plugin 'FelikZ/ctrlp-py-matcher'

" tmux
Plugin 'christoomey/vim-tmux-navigator'

"File Insert
Plugin 'rking/ag.vim'

" Tagbar
" You need to install exuberant c tags
"     brew install ctags (mac)
"     sudo apt-get install exuberant-ctags (ubuntu)
"Plugin 'majutsushi/tagbar'

"Coffeescript tabbar
" install gem install CoffeeTags
"Plugin 'lukaszkorecki/CoffeeTags'


""""""""""""""""""
" Misc Things... "
""""""""""""""""""
" Git tools
Plugin 'tpope/vim-fugitive'

" Command Line tools
Plugin 'tpope/vim-eunuch'

" Dispatch Vim - allows async commands
Plugin 'tpope/vim-dispatch'

"""""""""""""""""""""""""""
" * Useful vundle stuff * "
"""""""""""""""""""""""""""
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'

" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}


" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal

" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

""""""""""""""""""""""""
" * Built in Toggles * "
""""""""""""""""""""""""
" Colors
syntax enable
if ($USER == "ty" || $USER == "tyrocca")
    set t_Co=256
    if ($terminal_background == "light")
        set background=light
    else
        set background=dark
    endif

    let g:solarized_termcolors=16
    colorscheme solarized
else
    colorscheme monokai
endif

" Formatting
set fileformat=unix    " Make sure the files are always unix
set fileformats=unix    " Make sure the files are always unix
set tabstop=4 		    " number of visual spaces per TAB
set softtabstop=4  	    " number of spaces in tab when editing
set shiftwidth=4        " number of spaces when ?
set expandtab       	" tabs are spaces (tab button = spaces)
set colorcolumn=80      " keep within this column

"UI configs
set number 		        " show line nums
set showcmd 		    " show last entered command
set cursorline          " highlight current line
filetype indent on      " load filetype-specific indent files
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch 		    " show matching ()
set mouse=a             " Turn on mouse mode
if !has('nvim')
    set ttymouse=xterm
endif
set timeoutlen=1000 ttimeoutlen=0  " prevent slowdown on normal mode

" Prevent Arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap jj <ESC>   " Some people say this helps speed up normal mode
set scrolloff=5     " Makes the cursor offset


" http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden
set history=1000

"UX config

" Search
set incsearch           " search as characters are entered
set hlsearch            " highlight matches

"Searching
set ignorecase
set smartcase
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive


" turn off search highlight
"Vim will keep highlighted matches from searches until you
"either run a new one or manually stop highlighting the old
"search with :nohlsearch. I find myself running this all
" the time so I've mapped it to <leader><space>.
nnoremap <silent> <leader><space> :nohlsearch<CR>

"Smarter searching
":set smartcase
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use


"""""""""""""""""""""""
" Copying and pasting "
"""""""""""""""""""""""
" Reselecting Pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

"Paste toggle
set pastetoggle=<F2>

" f3 will toggle linenumbers
noremap <F3> :set invnumber<CR>
inoremap <F3> <C-O>:set invnumber<CR>


"Paste tools to personal clipboard
"set clipboard=unnamed
"vmap "+y :!xclip -f -sel clip
"map "+p :r!xclip -o -sel clip

"""""""""""""""""""""
" Function Key Maps "
"""""""""""""""""""""
" f5 will strip out whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Toggle foldmethod on
nnoremap <F8> :setlocal foldmethod=indent<CR>:setlocal foldignore= <CR>

" Launch vimrc
nnoremap <F9> :tabe ~/.vimrc<CR>

"""""""""""""""""""""""
" Leader Key Mappings "
"""""""""""""""""""""""
" for inserting new lines (like <C-o>)
nnoremap <silent> <leader><CR> i<CR><ESC>
" this makes a nice surrounding block around a piece of text
nnoremap <leader>1 :center 80<CR>hhv0r#A<SPACE><ESC>40A#<ESC>d80<BAR>YppVr#kk.
" Remove those fucking ^M characters
nnoremap <silent> <leader>6 :%s///g<CR>


"""""""""""""""""""""""
" * GUI only things * " 
"""""""""""""""""""""""

if has("gui_running")
    set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline  
endif

""""""""""""""""""""
" * Plugin Mods  * "
""""""""""""""""""""

"""""""""""""""""""""""""""
" Modifications for CTRLP "
"""""""""""""""""""""""""""
"Accessing mru mode
nnoremap <silent> <leader>l :CtrlPMRU<CR>
nnoremap <silent> <leader>b :CtrlPBuffer<CR>
nnoremap <silent> <leader>t :CtrlPTag<cr>


" Ignored files
"https://robots.thoughtbot.com/faster-grepping-in-vim
"Silver Searcher

let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_use_caching = 0
set wildignore+=*/tmp/*,**/css/*,
    \*/cc/*,*.so,*.swp,*.zip,*.pyc,*/.git
"let g:ctrlp_custom_ignore = {
  "\ 'dir':  '\v[\/]\.(git|hg|svn)$',
  "\ 'file': '\.pyc$'
  "\ }

"""""""""""
" Airline "
"""""""""""
" For Airline
set laststatus=2

" For Airline
let g:airline_powerline_fonts = 1

" For TMUX plugin
let g:tmuxline_powerline_separators = 1

"""""""""""
" ArgWrap "
"""""""""""
" Command to exec
nnoremap <silent> <leader>a :ArgWrap<CR>

"""""""""""""
" Syntastic "
"""""""""""""
if !has('nvim')
    " for syntastic use f12
    let g:syntastic_mode_map = { 'mode': 'active' }
    nnoremap <F10> :SyntasticToggleMode<CR>
    nnoremap <F12> :update<CR>:SyntasticCheck<CR>  " Toggles Syntax check

    " Fun styling for syntastic
    let g:syntastic_error_symbol = '‚ùå'
    let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
    let g:syntastic_warning_symbol = '‚ö†Ô∏è'
    let g:syntastic_style_warning_symbol = 'üí©'

    " Javascript
    let g:syntastic_javascript_checkers = ['eslint']

    " Python
    let g:syntastic_python_checkers = ["flake8"]

    " Ignore Errors
    let g:syntastic_python_flake8_args = '--max-line-length=200 --ignore=W391'
else
    let g:neomake_python_enabled_makers = ['flake8']
    autocmd! BufWritePost * Neomake
endif


""""""""""""""""""""
" Fugitive settings "
"""""""""""""""""""""
" by default is split
set diffopt+=vertical

""""""""""""""""
" Indent lines "
""""""""""""""""
" Disabled by default
let g:indentLine_enabled = 0
" Thing to speed up vim
let g:indentLine_faster = 1
" Toggle them on and off
nnoremap <F7> :IndentLinesToggle<CR>

"""""""""""""""
" Jedi Python "
"""""""""""""""
"let g:jedi#use_tabs_not_buffers = 1
"let g:jedi#popup_select_first = 0
"let g:jedi#popup_on_dot = 0


""""""""
" TMUX "
""""""""
let g:tmux_navigator_save_on_switch = 1  " Save on close

"""""""""""""""""
" Auto Commands "
"""""""""""""""""
" auto cmd to strip whitespace
"autocmd BufWritePre * :%s/\s\+$//e
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre *.py,*.js,*.coffee :call <SID>StripTrailingWhitespaces()

" open recent files if no file arg is passed
if len(argv()) == 0
    autocmd VimEnter * CtrlPMRU
endif

"""""""""""""""
" Misc things "
"""""""""""""""
" prevents writing stupid files
cabbrev w] w
cabbrev w\ w
cabbrev w' w

" make write actually write
command! W  write

"""""""""""
" Credits "
"""""""""""
" inspiration
" http://marcgg.com/blog/2016/03/01/vimrc-example/


"""""""""""""""
" Trial Items "
"""""""""""""""
" changes the cursor in vim
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""""""""""""""""""""
" Webpack problems "
""""""""""""""""""""
" https://github.com/webpack/webpack/issues/781
set backupcopy=yes

 " ctags optimization
"set autochdir
"set tags=tags;

" Copy/pasting over ssh to osx
"function! PropagatePasteBufferToOSX()
    "let @n=getreg('"')
    "call system('pbcopy-remote', @n)
    "echo "done"
"endfunction
"function! PopulatePasteBufferFromOSX()
    "let @"=system('pbpaste-remote')
    "echo "done"
"endfunction
"nnoremap <leader>6 :call PopulatePasteBufferFromOSX()<cr>
"nnoremap <leader>7 :call PropagatePasteBufferToOSX()<cr>
