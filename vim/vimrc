""""""""""""""""
" * Vim Plug * "
""""""""""""""""
set nocompatible              " be iMproved, required
" https://github.com/junegunn/vim-plug

" Automatic install
if !has("nvim") && empty(glob('~/.vim/autoload/plug.vim'))
    " Install for regular vim
    " First install VimPlug
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " Then source the plugins
    source ~/dotfiles/vim/plugins.vim
    set nocompatible  " Make sure nocopatible is toggled
    " Load and source
    autocmd VimEnter * PlugInstall | source $MYVIMRC
elseif has("nvim") && empty(glob('~/.config/nvim/autoload/plug.vim'))
    " Install for neovim
    " Install VimPlug
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " Source Plugins
    source ~/dotfiles/vim/plugins.vim
    " Reload vim!
    autocmd VimEnter * PlugInstall | source $MYVIMRC
else
    " Load Plugins!
    source ~/dotfiles/vim/plugins.vim

    " set settings for things that need plugins
    " Color scheme is gruvbox by default so anyone can use it
    if has("gui_vimr")
        " in vimR we want the gui colors because they look nice
        colorscheme gruvbox
        set termguicolors
    elseif ($USER == "ty" || $USER == "tyrocca")
        " (solarized requires special things, so only I have it)
        " Not needed for neovim
        " if !has('nvim')
        "     set t_Co=16
        "     let g:solarized_termcolors=16
        " endif

        if ($USER == "tyrocca" && has("termguicolors"))
            " set termguicolors
            let g:gruvbox_italic=1
            colorscheme gruvbox
            " let g:gruvbox_contrast_dark="hard"
            if exists('$TMUX')
                autocmd VimEnter * call tmuxline#set_statusline('vim_statusline_3')
            endif
        else
            " Set colorscheme
            " set termguicolors
            colorscheme gruvbox
        endif


        " Trial ITEMS
        " let g:hardtime_default_on = 1

        " Trying to get trucolors to work -
        " if (0 == 1)
        "     " get termguicolors to work
        "     set termguicolors
        "     if filereadable(expand("~/.vimrc_background"))
        "         let base16colorspace=256
        "         source ~/.vimrc_background
        "     endif
        "     colorscheme base16-solarized-dark
        " endif
    else
        colorscheme gruvbox
    endif
endif

""""""""""""""""""""""""
" * Built in Toggles * "
""""""""""""""""""""""""
" Colors
syntax enable
set background=dark

" Formatting / Settings
set fileformat=unix     " Make sure the files are always unix
set fileformats=unix    " Make sure the files are always unix
set backspace=2         " make backspace work
set expandtab       	" tabs are spaces (tab button = spaces)
set shiftwidth=4        " number of spaces when shifting block
set softtabstop=4  	    " number of spaces in tab when editing
set tabstop=4 		    " number of visual spaces per TAB

" Makes it so that javascript keys are colored
" https://github.com/pangloss/vim-javascript/issues/138
hi def link jsObjectKey Label

" Italics for vim
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
highlight Comment cterm=italic

" http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden
set history=1000

" folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " dont fold by default
set foldlevel=0         " this is just what i use

" UI configs
filetype plugin indent on      " load filetype-specific indent files
set scrolloff=5         " Makes the cursor offset
set colorcolumn=80      " keep within this column
set cursorline          " highlight current line
set lazyredraw          " redraw only when we need to.
set number 		        " show line nums
set showcmd 		    " show last entered command
set showmatch 		    " show matching ()
set wildmenu            " visual autocomplete for command menu

" UI Settings if nvim isn't running
set mouse=a             " Turn on mouse mode
if !has('nvim')
    set ttymouse=xterm2
endif


" changes the cursor in vim
if has('nvim')
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
elseif exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

""""""""""""""""""
" Fumble fingers "
""""""""""""""""""
" prevents writing stupid files
cabbrev w] w
cabbrev w\ w
cabbrev w' w

" make write actually write
command! W  write


" copy paste over ssh
" set clipboard^=unnamedplus,unnamed

" Search configs
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
set smartcase
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive

" turn off search highlight
"Vim will keep highlighted matches from searches until you
"either run a new one or manually stop highlighting the old
"search with :nohlsearch. I find myself running this all
" the time so I've mapped it to <leader><space>.
nnoremap <silent> <leader><space> :nohlsearch<CR>

" Other optimizations
" Some people say this helps speed up normal mode
set timeoutlen=1000 ttimeoutlen=0  " prevent slowdown on normal mode
inoremap jj <ESC>

" Prevent Arrow keys
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

"""""""""""""""""""""""
" Copying and pasting "
"""""""""""""""""""""""
" Reselecting Pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" For using system clipboard
" Bind <leader>y to forward last-yanked text to Clipper
nnoremap <silent> <leader>y :call system('nc localhost 8377', @0)<CR>
nnoremap <silent> <F19> :call system('nc localhost 8377', @0)<CR>

"Paste toggle
set pastetoggle=<F2>

"""""""""""""""""""""""""""""""
" * Webpack Specific Things * "
"""""""""""""""""""""""""""""""
" Webpack problems
" https://github.com/webpack/webpack/issues/781
set backupcopy=yes

""""""""""""""""""""""""
" Vim Backups and Undo "
""""""""""""""""""""""""
" swap files (.swp) in a common location
" // means use the file's full path
silent !mkdir -p ~/.vim/.swp/ > /dev/null 2>&1
set directory=~/.vim/.swp//

" " backup files (~) in a common location if possible
set backup
silent !mkdir -p ~/.vim/.backup/ > /dev/null 2>&1
set backupdir=~/.vim/.backup//

" turn on undo files, put them in a common location
set undofile
silent !mkdir -p ~/.vim/.undo/ > /dev/null 2>&1
set undodir=~/.vim/.undo//

"""""""""""""""""""""
" Function Key Maps "
"""""""""""""""""""""
" f3 will toggle linenumbers
noremap <F3> :set invnumber<CR>
inoremap <F3> <C-O>:set invnumber<CR>

" f4 will toggle git gutter
noremap <F4> :GitGutterToggle<CR>
inoremap <F4> <C-O>:GitGutterToggle<CR>

" F5 toggles friendly colorscheme
noremap <F5> :colorscheme gruvbox <CR>

" Toggle foldmethod on
nnoremap <F8> :setlocal foldmethod=indent<CR>:setlocal foldignore= <CR>

" Launch vimrc
nnoremap <F9> :tabe ~/.vimrc<CR>

"""""""""""""""""""""""
" Leader Key Mappings "
"""""""""""""""""""""""
" for inserting new lines (like <C-o>)
nnoremap <silent> <leader><CR> i<CR><ESC>
" this makes a nice surrounding block around a piece of text
nnoremap <leader>1 :center 80<CR>hhv0r#A<SPACE><ESC>40A#<ESC>d80<BAR>YppVr#kk.
" Remove those fucking ^M characters
nnoremap <silent> <leader>6 :%s///g<CR>

" for saving
nnoremap <leader>w :w<CR>

"""""""""""""""""""""""
" * GUI only things * "
"""""""""""""""""""""""
if has("gui_running")
    set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline
endif

"""""""""""""""""""""""
" * Neovim Terminal * "
"""""""""""""""""""""""
if has("nvim")
    " make it so escape can close terminal
    tnoremap <Esc> <C-\><C-n>
endif

""""""""""""""""""""
" * Plugin Mods  * "
""""""""""""""""""""

" File Navigation tools (if gui we need a different one)
if has("gui_running")
    """""""""""""""""""""""""""
    " Modifications for CTRLP "
    """""""""""""""""""""""""""
    nnoremap <silent> <leader>l :CtrlPMRU<CR>
    nnoremap <silent> <leader>b :CtrlPBuffer<CR>
    nnoremap <silent> <leader>t :CtrlPTag<cr>
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'

    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    let g:ctrlp_use_caching = 0
else
    """""""""""""""""""""""""
    " Modifications for FZF "
    """""""""""""""""""""""""
    nnoremap <silent> <C-p> :GFiles<CR>
    nnoremap <silent> <leader>l :History<CR>
    nnoremap <silent> <leader>t :Tags<CR>
    nnoremap <silent> <leader>r :BTags<CR>
    nnoremap <silent> <leader>b :Buffers<CR>
endif

" wildcard
set wildignore+=*/tmp/*,**/css/*,
    \*/cc/*,*.so,*.swp,*.zip,*.pyc,*/.git

"""""""""""
" Airline "
"""""""""""
" For Airline
set laststatus=2

" For Airline
let g:airline_powerline_fonts = 1

" For TMUX plugin
let g:tmuxline_powerline_separators = 1

"""""""""""
" ArgWrap "
"""""""""""
" Command to exec
nnoremap <silent> <leader>a :ArgWrap<CR>

""""""""""""
" Deoplete "
""""""""""""
if has('nvim')
    " Turns on Deoplete
    let g:deoplete#enable_at_startup = 1

    " mapping to make it so that tab triggers auto complete if you don't want
    " auto open http://bit.ly/2kBXK0v
    " Disable auto complete
    " let g:deoplete#disable_auto_complete = 1

    " Allows multiple omni functions
    let g:deoplete#omni#functions = {}
    let g:deoplete#omni#functions.javascript = [
        \ 'tern#Complete',
        \ 'jspc#omni'
    \]

    " Adjust deoplete sources
    set completeopt=longest,menuone,preview
    let g:deoplete#sources = {}
    let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']
    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']

    " autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
    " or just disable the preview entirely
    set completeopt-=preview
    " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    " Close the documentation window when completion is done
    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
endif

"""""""""""""""""""""
" Fugitive settings "
"""""""""""""""""""""
" by default is split
set diffopt+=vertical

""""""""""""""
" vim js-doc "
""""""""""""""
" Turn on es6 syntax
let g:jsdoc_enable_es6 = 1
" Allow prompt for interactive input
let g:jsdoc_allow_input_prompt = 1
" Prompt for a function description
let g:jsdoc_input_description = 1
nmap <silent> <leader>d <Plug>(jsdoc)

""""""""""""""""
" REPL - Slime "
""""""""""""""""
" SLIME
let g:slime_target = "tmux"
let g:slime_python_ipython = 1


"""""""""""""""""""""""
" * Syntax Checking * "
"""""""""""""""""""""""

" makes gutter correct color
highlight clear SignColumn

"""""""""""""
" Neoformat "
"""""""""""""
if has("nvim")
    let g:neoformat_enabled_javascript = ['esformatter', 'js-beautify']
endif

"""""""""""
" NeoMake "
"""""""""""
" Python
let g:neomake_python_enabled_makers = ['flake8']
" Ignore Errors
let g:neomake_python_flake8_args = ['--max-line-length=200', '--ignore=W391']

" Javascript
" let g:neomake_javascript_eslint_exe = $PWD .'/node_modules/.bin/eslint'
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_jsx_enabled_makers = ['eslint']

autocmd! BufWritePost * Neomake

""""""""""""""""""""
" Undo helper tool "
""""""""""""""""""""
nnoremap <F6> :MundoToggle <CR>
nnoremap <silent><leader>u :MundoToggle <CR>
if has('python3')
    let g:mundo_prefer_python3 = 1          " anything else breaks on Ubuntu 16.04+
endif


"""""""""""""
" Ultisnips "
"""""""""""""
let g:UltiSnipsExpandTrigger="<Leader><Leader>"

""""""""
" TMUX "
""""""""
let g:tmux_navigator_save_on_switch = 1  " Save on close

"""""""""""""""
" Vim Grepper "
"""""""""""""""
if executable('rg')
    cnoreabbrev RG GrepperRg
    cnoreabbrev Rg GrepperRg
    cnoreabbrev rg GrepperRg
    nnoremap <leader>*   :Grepper -tool rg -cword -noprompt<cr>
elseif executable('ag')
    " somtimes I write the wrong thing
    cnoreabbrev AG GrepperAg
    cnoreabbrev Ag GrepperAg
    cnoreabbrev ag GrepperAg

    " leader star ag's for you
    nnoremap <leader>*   :Grepper -tool ag -cword -noprompt<cr>
    let g:grepper = {}
    let g:grepper.ag = { 'grepprg': 'ag --nogroup --nocolor --column' }
    " gs searches ex: gs$
    nmap gs <plug>(GrepperOperator)
    xmap gs <plug>(GrepperOperator)
endif

"""""""""""""
" vim notes "
"""""""""""""
" Currently Disabled
let g:notes_directories = ['~/Notes']
let g:notes_suffix = '.txt'

"""""""""""""""""""""
" * Auto Commands * "
"""""""""""""""""""""

" auto cmd to strip whitespace
function! <SID>StripTrailingWhitespaces()
    " Ignore: do not run if FileType is markdown
    " if &ft = 'markdown\|gitcommit'
    "     return
    " endif
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Auto set width to 80 chars
" au BufRead,BufNewFile *.md setlocal textwidth=80

" make commit messages have spell check
autocmd FileType gitcommit setlocal spell


"""""""""""""""""""
" * Trial Items * "
"""""""""""""""""""

"""""""""""""
" Hard Mode "
"""""""""""""
nnoremap <leader>h <Esc>:HardTimeToggle<CR>
let g:hardtime_ignore_quickfix = 1
let g:hardtime_maxcount = 2
let g:hardtime_showmsg = 1

"""""""""""""
" Vim Sneak "
"""""""""""""
let g:sneak#streak = 1


"""""""""""""""""""""""""""""""""""""""""
" FileType Configs (overwrite defaults) "
"""""""""""""""""""""""""""""""""""""""""
" autocmd Filetype html setlocal ts=2 sts=2 sw=2
" autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript,javascript.jsx setlocal ts=4 sts=4 sw=4 colorcolumn=100


"""""""""""
" Credits "
"""""""""""
" inspiration
" http://marcgg.com/blog/2016/03/01/vimrc-example/
" autocmd Filetype python setlocal ts=4 sts=4 sw=4 colorcolumn=80
