""""""""""""""""
" * Vim Plug * "
""""""""""""""""
set nocompatible              " be iMproved, required
" https://github.com/junegunn/vim-plug

if has('nvim')
    let g:python_host_prog = '/Users/tyrocca/.pyenv/versions/neovim27/bin/python'
    let g:python3_host_prog = '/Users/tyrocca/.pyenv/versions/neovim38/bin/python'
endif


""""""""""""""""""""""""
" * Automatic install *"
""""""""""""""""""""""""
if !has("nvim") && empty(glob('~/.vim/autoload/plug.vim'))
    " Install for regular vim
    " First install VimPlug
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " Then source the plugins
    source ~/dotfiles/vim/plugins.vim
    set nocompatible  " Make sure nocopatible is toggled
    " Load and source
    autocmd VimEnter * PlugInstall | source $MYVIMRC
elseif has("nvim") && empty(glob('~/.config/nvim/autoload/plug.vim'))
    " Install for neovim
    " Install VimPlug
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    " Source Plugins
    source ~/dotfiles/vim/plugins.vim
    " Reload vim!
    autocmd VimEnter * PlugInstall | source $MYVIMRC
else
    " Load Plugins!
    source ~/dotfiles/vim/plugins.vim

    " Background
    if exists("$VIM_COLOR_SCHEME")
        colorscheme $VIM_COLOR_SCHEME
    else
        colorscheme gruvbox
    endif

    " set settings for things that need plugins
    " Color scheme is gruvbox by default so anyone can use it
    if has("gui_vimr")
        " in vimR we want the gui colors because they look nice
        set termguicolors
    elseif ($USER == "ty" || $USER == "tyrocca")
        if ($USER == "tyrocca" && has("termguicolors"))
            set termguicolors
            " set clipboard=unnamed,unnamedplus
            let g:gruvbox_italic=1
            " we are setting the theme in the tmux config so
            " we don't want airline to do it
            let g:airline#extensions#tmuxline#enabled = 0
            " let g:gruvbox_contrast_light=""
            " let g:gruvbox_contrast_dark="hard"
        endif
        " Trial ITEMS
        " let g:hardtime_default_on = 1
    endif
endif


""""""""""""""""""""""""
" * Built in Toggles * "
""""""""""""""""""""""""
" Formatting / Settings
set fileformat=unix     " Make sure the files are always unix
set fileformats=unix    " Make sure the files are always unix
set backspace=2         " make backspace work
set expandtab       	" tabs are spaces (tab button = spaces)
set shiftwidth=4        " number of spaces when shifting block
set softtabstop=4  	    " number of spaces in tab when editing
set tabstop=4 		    " number of visual spaces per TAB

" folding settings
set foldmethod=indent   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " dont fold by default
set foldlevel=0         " this is just what i use

" UI configs
set scrolloff=5         " Makes the cursor offset
set colorcolumn=80      " keep within this column
set cursorline          " highlight current line
set lazyredraw          " redraw only when we need to.
set number 		        " show line nums
set showcmd 		    " show last entered command
set showmatch 		    " show matching ()
set wildmenu            " visual autocomplete for command menu

" Other optimizations
" Some people say this helps speed up normal mode
set timeoutlen=1000 ttimeoutlen=0  " prevent slowdown on normal mode

" UI Settings if nvim isn't running
set mouse=a             " Turn on mouse mode
if !has('nvim')
    set ttymouse=xterm2
endif

""""""""""
" Search "
""""""""""
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
if has("nvim")
    " set as split or nospit
    set inccommand=split
endif
set ignorecase
set smartcase
"/copyright      " Case insensitive
"/Copyright      " Case sensitive
"/copyright\C    " Case sensitive
"/Copyright\c    " Case insensitive

" turn off search highlight
" Vim will keep highlighted matches from searches until you
" either run a new one or manually stop highlighting the old
" search with :nohlsearch. I find myself running this all
" the time so I've mapped it to <leader><space>.
nnoremap <silent> <leader><space> :nohlsearch<CR>

""""""""""""""
" Appearance "
""""""""""""""
syntax enable
filetype plugin indent on      " load filetype-specific indent files

" Makes it so that javascript keys are colored
" https://github.com/pangloss/vim-javascript/issues/138
hi def link jsObjectKey Label

" Set Colorscheme
if (exists("$VIM_BACKGROUND") && $VIM_BACKGROUND == "light")
    set background=light
else
    set background=dark
endif

" Cursor changes for normal vim
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
if !has('nvim')
    let &t_ZH="\e[3m"
    let &t_ZR="\e[23m"

    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
endif

highlight Comment cterm=italic

" MacVim Gui things
if has("gui_running")
    set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline
endif

" Netrw
" https://shapeshed.com/vim-netrw/
let g:netrw_liststyle = 3    " styling of the files
let g:netrw_browse_split = 4 " open in new window
let g:netrw_winsize = 25     " make it use 25 % of the screen

"""""""""""""""""
" Abbreviations "
"""""""""""""""""
" prevents writing stupid files
cabbrev w] w
cabbrev w\ w
cabbrev w' w

" make capital W write
command! W  write

" other abbrevs
iabbrev py_breakpoint import ipdb; ipdb.set_trace()
iabbrev pydebug import ipdb; ipdb.set_trace()
iabbrev rdbdebug from celery.contrib import rdb; rdb.set_trace()
iabbrev NOTE NOTE (tyrocca <C-R>=strftime("%Y-%m-%d")<CR>):
iabbrev HACK HACK (tyrocca <C-R>=strftime("%Y-%m-%d")<CR>):
iabbrev TODO TODO (tyrocca <C-R>=strftime("%Y-%m-%d")<CR>):
iabbrev FIXME FIXME (tyrocca <C-R>=strftime("%Y-%m-%d")<CR>):
iabbrev DELETEME DELETEME (tyrocca <C-R>=strftime("%Y-%m-%d")<CR>):

""""""""""""""""""""""""
" Vim Backups and Undo "
""""""""""""""""""""""""
" Source - http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden
set history=1000

" Webpack problems
" https://github.com/webpack/webpack/issues/781
set backupcopy=yes

" swap files (.swp) in a common location
" // means use the file's full path
silent !mkdir -p ~/.vim/.swp/ > /dev/null 2>&1
set directory=~/.vim/.swp//

" backup files (~) in a common location if possible
set backup
silent !mkdir -p ~/.vim/.backup/ > /dev/null 2>&1

set backupdir=~/.vim/.backup//

" turn on undo files, put them in a common location
set undofile
silent !mkdir -p ~/.vim/.undo/ > /dev/null 2>&1
set undodir=~/.vim/.undo//

"""""""""""""""""""""""
" Copying and pasting "
"""""""""""""""""""""""
" from clipboard
set clipboard^=unnamedplus,unnamed

"Paste toggle
set pastetoggle=<F2>

" Reselecting Pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'


""""""""""""""""
" * Mappings * "
""""""""""""""""
inoremap jj <ESC>

" Neovim Terminal
if has("nvim")
    " make it so escape can close terminal
    tnoremap <Esc> <C-\><C-n>
endif

"""""""""""""""""""""
" Function Key Maps "
"""""""""""""""""""""
" f3 will toggle linenumbers
noremap <F3> :set invnumber<CR>
inoremap <F3> <C-O>:set invnumber<CR>

" f4 will toggle git gutter
noremap <F4> :GitGutterToggle<CR>
inoremap <F4> <C-O>:GitGutterToggle<CR>

" F5 toggles friendly colorscheme
noremap <F5> :colorscheme gruvbox <CR>

" Toggle foldmethod on
nnoremap <F8> :setlocal foldmethod=indent<CR>:setlocal foldignore= <CR>

" Launch vimrc
nnoremap <F9> :tabe ~/.vimrc<CR>
nnoremap <F12> :%s///g<CR>

"""""""""""""""""""""""
" Leader Key Mappings "
"""""""""""""""""""""""
" this makes a nice surrounding block around a piece of text
nnoremap <leader>1 :center 80<CR>hhv0r#A<SPACE><ESC>40A#<ESC>d80<BAR>YppVr#kk.

" Another commenting tool
nnoremap <leader>2 ^3a/<ESC>a<SPACE><ESC>75a*<ESC>o<ESC>^3a/<ESC>a<SPACE><ESC>75a*<ESC>O<ESC>^3a/<ESC>a<SPACE>

" Remove those fucking ^M characters
nnoremap <silent> <leader>6 :%s///g<CR>

" for saving
nnoremap <leader>w :w<CR>


""""""""""""""""""""
" * Plugin Mods  * "
""""""""""""""""""""

" File Navigation tools (if gui we need a different one)
if has("gui_running")
    """""""""""""""""""""""""""
    " Modifications for CTRLP "
    """""""""""""""""""""""""""
    nnoremap <silent> <leader>l :CtrlPMRU<CR>
    nnoremap <silent> <leader>b :CtrlPBuffer<CR>
    nnoremap <silent> <leader>t :CtrlPTag<cr>
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'

    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    let g:ctrlp_use_caching = 0
else
    """""""""""""""""""""""""
    " Modifications for FZF "
    """""""""""""""""""""""""
    nnoremap <silent> <C-p> :GFiles<CR>
    nnoremap <silent> <leader>l :History<CR>
    nnoremap <silent> <leader>t :Tags<CR>
    nnoremap <silent> <leader>r :BTags<CR>
    nnoremap <silent> <leader>b :Buffers<CR>
    "autocomplete
    inoremap <expr> <c-x><c-k> fzf#complete('cat /usr/share/dict/words')
endif

" wildcard
set wildignore+=*/tmp/*,**/css/*,
    \*/cc/*,*.so,*.swp,*.zip,*.pyc,*/.git

"""""""""""
" Airline "
"""""""""""
" For Airline
set laststatus=2

" For Airline
let g:airline_powerline_fonts = 1

" For TMUX plugin
let g:tmuxline_powerline_separators = 1

"""""""""""
" ArgWrap "
"""""""""""
" Command to exec
nnoremap <silent> <leader>a :ArgWrap<CR>

"""""""""""""""""""""
" Fugitive settings "
"""""""""""""""""""""
" by default is split -- broken in vim
if (has('nvim'))
    set diffopt+=vertical
endif

""""""""""""""
" vim js-doc "
""""""""""""""
" Turn on es6 syntax
let g:jsdoc_enable_es6 = 1
" Allow prompt for interactive input
let g:jsdoc_allow_input_prompt = 1
" this adds in the function name
let g:jsdoc_additional_descriptions = 1
" The character after the param name
let g:jsdoc_param_description_separator = " - "
" Prompt for a function description
let g:jsdoc_input_description = 1
" undersocre is private
let g:jsdoc_underscore_private = 1
nmap <silent> <leader>d <Plug>(jsdoc)

""""""""""""""""
" REPL - Slime "
""""""""""""""""
" SLIME
let g:slime_target = "tmux"
let g:slime_python_ipython = 1

"""""""""
" Vimux "
"""""""""
let g:VimuxOrientation = "h"

""""""""""""
" Vim Test "
""""""""""""
if exists('$TMUX')
    let test#strategy = "vimux"
else
    let text#strategy = 'asyncrun'
endif

""""""""""""""""""
" Vim easy align "
""""""""""""""""""
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


"""""""""""""""""""""""
" * Syntax Checking * "
"""""""""""""""""""""""

" makes gutter correct color
highlight clear SignColumn

"""""""""""""
" Neoformat "
"""""""""""""
if has("nvim")
    let g:neoformat_enabled_javascript = ['esformatter', 'js-beautify']
endif

"""""""""""
" NeoMake "
"""""""""""
" Python
" let g:neomake_python_enabled_makers = ['pylint']
" let g:neomake_python_enabled_makers = ['pylint', 'flake8']
" Ignore Errors
let g:neomake_python_mypy_exe = '/Users/tyrocca/.pyenv/versions/neovim38/bin/mypy'
let g:neomake_python_flake8_exe = '/Users/tyrocca/.pyenv/versions/neovim38/bin/flake8'
let g:neomake_python_enabled_makers = ['flake8', 'mypy']
let g:neomake_python_flake8_args = ['--max-line-length=88', '--ignore=W391']
" let g:neomake_python_flake8_args = ['--max-line-length=88', '--ignore=W391']
" let g:neomake_python_pylint_args = ['--ignore=[E0611]']

" Javascript
let g:neomake_javascript_eslint_exe = $PWD .'/node_modules/.bin/eslint'
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_jsx_enabled_makers = ['eslint']

autocmd! BufWritePost * Neomake

""""""""""""""""""""
" Undo helper tool "
""""""""""""""""""""
nnoremap <F6> :MundoToggle <CR>
nnoremap <silent><leader>u :MundoToggle <CR>
if has('python3')
    let g:mundo_prefer_python3 = 1          " anything else breaks on Ubuntu 16.04+
endif

"""""""""""""
" Ultisnips "
"""""""""""""
let g:UltiSnipsExpandTrigger="<Leader><Leader>"

""""""""
" TMUX "
""""""""
let g:tmux_navigator_save_on_switch = 1  " Save on close

"""""""""""""""
" Vim Grepper "
"""""""""""""""
if executable('rg')
    cnoreabbrev RG GrepperRg
    cnoreabbrev Rg GrepperRg
    cnoreabbrev rg GrepperRg
    nnoremap <leader>*   :Grepper -tool rg -cword -noprompt<cr>
elseif executable('ag')
    " somtimes I write the wrong thing
    cnoreabbrev AG GrepperAg
    cnoreabbrev Ag GrepperAg
    cnoreabbrev ag GrepperAg

    " leader star ag's for you
    nnoremap <leader>*   :Grepper -tool ag -cword -noprompt<cr>
    let g:grepper = {}
    let g:grepper.ag = { 'grepprg': 'ag --nogroup --nocolor --column' }
    " gs searches ex: gs$
    nmap gs <plug>(GrepperOperator)
    xmap gs <plug>(GrepperOperator)
endif

"""""""""""""
" Vim Sneak "
"""""""""""""
let g:sneak#streak = 1


"""""""""""""""""""""
" * Auto Commands * "
"""""""""""""""""""""
" auto cmd to strip whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd! BufWritePre * :call <SID>StripTrailingWhitespaces()


" make commit messages have spell check

"""""""""""""""""""""""""""
" Pencil Plugin FileTypes "
"""""""""""""""""""""""""""
" Pencil writing tool
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'

" Latex https://github.com/xuhdev/vim-latex-live-preview (Skim is an option)
let g:livepreview_previewer = 'open -a Preview'

" Pencil augroup
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init()
                \ | setlocal spell ts=2 sts=2 sw=2 colorcolumn=
                \ | call AutoCorrect()
    autocmd Filetype git,gitsendemail,*commit*,*COMMIT* call pencil#init()
                \ | setlocal spell
                \ | call AutoCorrect()
    autocmd FileType text call pencil#init()
                \ | setlocal spell colorcolumn=
                \ | call AutoCorrect()
    autocmd Filetype tex,plaintex setlocal spell ts=2 sts=2 sw=2 colorcolumn=
                \ | call AutoCorrect()
                \ | autocmd! BufWritePost <buffer> :AsyncRun! osascript -e 'tell application "Keyboard Maestro Engine" to do script "Update Preview"'
    " \ | setl updatetime=1000

    """""""""""""""""""""""""""""""""""""""""
    " FileType Configs (overwrite defaults) "
    """""""""""""""""""""""""""""""""""""""""
    autocmd FileType html setlocal ts=2 sts=2 sw=2
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2
    autocmd FileType javascript,javascript.jsx,typescript,typescript.tsx
                \ setlocal ts=2 sts=2 sw=2 colorcolumn=100
                \ | :iabbrev <buffer> True true
                \ | :iabbrev <buffer> False false
    autocmd FileType python
                \ setlocal ts=4 sts=4 sw=4 colorcolumn=88
                \ | :iabbrev <buffer> true True
                \ | :iabbrev <buffer> false False
    autocmd FileType c,cpp
                \ setlocal ts=4 sts=4 sw=4 colorcolumn=80
                " \ | set path+=./include
                " \ | autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END


" Settings for C
let &path.="./src/include,./include/,"
let g:load_doxygen_syntax=1
" augroup project
"     autocmd!
"     autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
" augroup END


"""""""""""""""""""
" * Trial Items * "
"""""""""""""""""""

"""""""""""""
" Hard Mode "
"""""""""""""
nnoremap <leader>h <Esc>:HardTimeToggle<CR>
let g:hardtime_ignore_quickfix = 1
let g:hardtime_maxcount = 2
let g:hardtime_showmsg = 1

"""""""
" LSP "
"""""""
" Toggle this
" if (0)

"                 " \ 'javascript': ['./node_modules/javascript-typescript-langserver/lib/language-server-stdio.js'],
"     " Automatically start language servers.
"     let g:LanguageClient_autoStart = 1

"     nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
"     nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
"     nnoremap <silent> <F11> :call LanguageClient_textDocument_rename()<CR>
" endif


let g:jsx_ext_required = 0

"""""""""""""""""""""""""""
" Compiling a c directory "
"""""""""""""""""""""""""""

" This is a hack for making this work
if (0)
    let g:neomake_c_gcc_exe = 'make'
    let g:neomake_c_gcc_args = '-C $PWD CC="clang -std=c99 -ggdb3"'
    let g:neomake_c_gcc_append_file = 0
    let g:neomake_c_enabled_makers = ['gcc']
endif


nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

"""""""""""
" Credits "
"""""""""""
" inspiration
" http://marcgg.com/blog/2016/03/01/vimrc-example/
" autocmd Filetype python setlocal ts=4 sts=4 sw=4 colorcolumn=80
" nnoremap <leader>h <Esc>:HardTimeToggle<CR>




""""""""""
" Python "
""""""""""
au FileType gitcommit,gitrebase let g:gutentags_enabled=0
let g:airline#extensions#tabline#enabled = 1

" https://github.com/ludovicchabant/vim-gutentags/issues/179
" let g:gutentags_file_list_command = {'markers': {'.pythontags': '/Users/tyrocca/Code/python-playground/python_file_lister.py'} }

" nmap <silent> <C-_> <Plug>(pydocstring)

"" let g:LanguageClient_serverCommands = {
""             \ 'javascript': ['javascript-typescript-stdio'],
""             \ 'javascript.jsx': ['javascript-typescript-stdio'],
""             \ }
"" nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
"" nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
"" nnoremap <silent> <F11> :call LanguageClient_textDocument_rename()<CR>






" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>rr <Plug>(coc-codeaction-selected)
nmap <leader>rr <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
